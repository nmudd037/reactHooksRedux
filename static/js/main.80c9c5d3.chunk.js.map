{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","ErrorBoundary","props","state","hasError","error","info","console","log","this","setState","children","Component","Scroll","SearchBox","searchChange","type","placeholder","onChange","App","dispatch","useDispatch","searchField","useSelector","searchRobots","displayRobots","isPending","onRequestRobots","fetch","then","response","json","users","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","value","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80c9c5d3.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1> Something went wrong! </h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll pointer\">{children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue pointer\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import './App.css';\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { requestRobots, setSearchField } from '../actions';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\n\nfunction App() {\n  //const [robots, setRobots] = useState([]);\n  //const [searchfield, setSearchfield] = useState('');\n\n  const dispatch = useDispatch();\n  const { searchField } = useSelector((state) => state.searchRobots);\n  // eslint-disable-next-line no-unused-vars\n  const { robots, isPending, error } = useSelector((state) => state.displayRobots);\n\n  // useEffect(() => {\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //     .then((response) => response.json())\n  //     .then((users) => {\n  //       setRobots(users);\n  //     });\n  // }, []);\n\n  const onSearchChange = (event) => {\n    dispatch(setSearchField(event.target.value));\n  };\n\n  const onRequestRobots = () => {\n    dispatch(requestRobots());\n  };\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((users) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    //return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const displayRobots = (state = initialStateRobots, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import './index.css';\nimport 'tachyons';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport App from './containers/App';\nimport { displayRobots, searchRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, displayRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n//console.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}